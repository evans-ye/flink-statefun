// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal.proto

package org.apache.flink.statefun.e2e.smoke.generated.shaded;

/**
 * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.SourceSnapshot}
 */
@javax.annotation.Generated("proto") public  final class SourceSnapshot extends
    org.apache.flink.statefun.sdk.shaded.com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.e2e.smoke.SourceSnapshot)
    SourceSnapshotOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SourceSnapshot.newBuilder() to construct.
  private SourceSnapshot(org.apache.flink.statefun.sdk.shaded.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SourceSnapshot() {
  }

  @Override
  public final org.apache.flink.statefun.sdk.shaded.com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private SourceSnapshot(
      org.apache.flink.statefun.sdk.shaded.com.google.protobuf.CodedInputStream input,
      org.apache.flink.statefun.sdk.shaded.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.apache.flink.statefun.sdk.shaded.com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    int mutable_bitField0_ = 0;
    org.apache.flink.statefun.sdk.shaded.com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        org.apache.flink.statefun.sdk.shaded.com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            commandsSentSoFarHandle_ = input.readInt32();
            break;
          }
          case 16: {

            failuresGeneratedSoFar_ = input.readInt32();
            break;
          }
          case 26: {
            FunctionTrackerSnapshot.Builder subBuilder = null;
            if (tracker_ != null) {
              subBuilder = tracker_.toBuilder();
            }
            tracker_ = input.readMessage(FunctionTrackerSnapshot.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(tracker_);
              tracker_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (org.apache.flink.statefun.sdk.shaded.com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.apache.flink.statefun.sdk.shaded.com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final org.apache.flink.statefun.sdk.shaded.com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return Internal.internal_static_org_apache_flink_statefun_e2e_smoke_SourceSnapshot_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return Internal.internal_static_org_apache_flink_statefun_e2e_smoke_SourceSnapshot_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            SourceSnapshot.class, Builder.class);
  }

  public static final int COMMANDSSENTSOFARHANDLE_FIELD_NUMBER = 1;
  private int commandsSentSoFarHandle_;
  /**
   * <code>int32 commandsSentSoFarHandle = 1;</code>
   */
  public int getCommandsSentSoFarHandle() {
    return commandsSentSoFarHandle_;
  }

  public static final int FAILURESGENERATEDSOFAR_FIELD_NUMBER = 2;
  private int failuresGeneratedSoFar_;
  /**
   * <code>int32 failuresGeneratedSoFar = 2;</code>
   */
  public int getFailuresGeneratedSoFar() {
    return failuresGeneratedSoFar_;
  }

  public static final int TRACKER_FIELD_NUMBER = 3;
  private FunctionTrackerSnapshot tracker_;
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.FunctionTrackerSnapshot tracker = 3;</code>
   */
  public boolean hasTracker() {
    return tracker_ != null;
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.FunctionTrackerSnapshot tracker = 3;</code>
   */
  public FunctionTrackerSnapshot getTracker() {
    return tracker_ == null ? FunctionTrackerSnapshot.getDefaultInstance() : tracker_;
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.FunctionTrackerSnapshot tracker = 3;</code>
   */
  public FunctionTrackerSnapshotOrBuilder getTrackerOrBuilder() {
    return getTracker();
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(org.apache.flink.statefun.sdk.shaded.com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (commandsSentSoFarHandle_ != 0) {
      output.writeInt32(1, commandsSentSoFarHandle_);
    }
    if (failuresGeneratedSoFar_ != 0) {
      output.writeInt32(2, failuresGeneratedSoFar_);
    }
    if (tracker_ != null) {
      output.writeMessage(3, getTracker());
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (commandsSentSoFarHandle_ != 0) {
      size += org.apache.flink.statefun.sdk.shaded.com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, commandsSentSoFarHandle_);
    }
    if (failuresGeneratedSoFar_ != 0) {
      size += org.apache.flink.statefun.sdk.shaded.com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, failuresGeneratedSoFar_);
    }
    if (tracker_ != null) {
      size += org.apache.flink.statefun.sdk.shaded.com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getTracker());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof SourceSnapshot)) {
      return super.equals(obj);
    }
    SourceSnapshot other = (SourceSnapshot) obj;

    if (getCommandsSentSoFarHandle()
        != other.getCommandsSentSoFarHandle()) return false;
    if (getFailuresGeneratedSoFar()
        != other.getFailuresGeneratedSoFar()) return false;
    if (hasTracker() != other.hasTracker()) return false;
    if (hasTracker()) {
      if (!getTracker()
          .equals(other.getTracker())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + COMMANDSSENTSOFARHANDLE_FIELD_NUMBER;
    hash = (53 * hash) + getCommandsSentSoFarHandle();
    hash = (37 * hash) + FAILURESGENERATEDSOFAR_FIELD_NUMBER;
    hash = (53 * hash) + getFailuresGeneratedSoFar();
    if (hasTracker()) {
      hash = (37 * hash) + TRACKER_FIELD_NUMBER;
      hash = (53 * hash) + getTracker().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static SourceSnapshot parseFrom(
      java.nio.ByteBuffer data)
      throws org.apache.flink.statefun.sdk.shaded.com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static SourceSnapshot parseFrom(
      java.nio.ByteBuffer data,
      org.apache.flink.statefun.sdk.shaded.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.apache.flink.statefun.sdk.shaded.com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static SourceSnapshot parseFrom(
      org.apache.flink.statefun.sdk.shaded.com.google.protobuf.ByteString data)
      throws org.apache.flink.statefun.sdk.shaded.com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static SourceSnapshot parseFrom(
      org.apache.flink.statefun.sdk.shaded.com.google.protobuf.ByteString data,
      org.apache.flink.statefun.sdk.shaded.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.apache.flink.statefun.sdk.shaded.com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static SourceSnapshot parseFrom(byte[] data)
      throws org.apache.flink.statefun.sdk.shaded.com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static SourceSnapshot parseFrom(
      byte[] data,
      org.apache.flink.statefun.sdk.shaded.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.apache.flink.statefun.sdk.shaded.com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static SourceSnapshot parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.apache.flink.statefun.sdk.shaded.com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static SourceSnapshot parseFrom(
      java.io.InputStream input,
      org.apache.flink.statefun.sdk.shaded.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.apache.flink.statefun.sdk.shaded.com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static SourceSnapshot parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.apache.flink.statefun.sdk.shaded.com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static SourceSnapshot parseDelimitedFrom(
      java.io.InputStream input,
      org.apache.flink.statefun.sdk.shaded.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.apache.flink.statefun.sdk.shaded.com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static SourceSnapshot parseFrom(
      org.apache.flink.statefun.sdk.shaded.com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.apache.flink.statefun.sdk.shaded.com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static SourceSnapshot parseFrom(
      org.apache.flink.statefun.sdk.shaded.com.google.protobuf.CodedInputStream input,
      org.apache.flink.statefun.sdk.shaded.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.apache.flink.statefun.sdk.shaded.com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(SourceSnapshot prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.SourceSnapshot}
   */
  @javax.annotation.Generated("proto") public static final class Builder extends
      org.apache.flink.statefun.sdk.shaded.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.e2e.smoke.SourceSnapshot)
      SourceSnapshotOrBuilder {
    public static final org.apache.flink.statefun.sdk.shaded.com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Internal.internal_static_org_apache_flink_statefun_e2e_smoke_SourceSnapshot_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Internal.internal_static_org_apache_flink_statefun_e2e_smoke_SourceSnapshot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SourceSnapshot.class, Builder.class);
    }

    // Construct using org.apache.flink.statefun.e2e.smoke.generated.shaded.SourceSnapshot.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (org.apache.flink.statefun.sdk.shaded.com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      commandsSentSoFarHandle_ = 0;

      failuresGeneratedSoFar_ = 0;

      if (trackerBuilder_ == null) {
        tracker_ = null;
      } else {
        tracker_ = null;
        trackerBuilder_ = null;
      }
      return this;
    }

    @Override
    public org.apache.flink.statefun.sdk.shaded.com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return Internal.internal_static_org_apache_flink_statefun_e2e_smoke_SourceSnapshot_descriptor;
    }

    @Override
    public SourceSnapshot getDefaultInstanceForType() {
      return SourceSnapshot.getDefaultInstance();
    }

    @Override
    public SourceSnapshot build() {
      SourceSnapshot result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public SourceSnapshot buildPartial() {
      SourceSnapshot result = new SourceSnapshot(this);
      result.commandsSentSoFarHandle_ = commandsSentSoFarHandle_;
      result.failuresGeneratedSoFar_ = failuresGeneratedSoFar_;
      if (trackerBuilder_ == null) {
        result.tracker_ = tracker_;
      } else {
        result.tracker_ = trackerBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        org.apache.flink.statefun.sdk.shaded.com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        org.apache.flink.statefun.sdk.shaded.com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        org.apache.flink.statefun.sdk.shaded.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        org.apache.flink.statefun.sdk.shaded.com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        org.apache.flink.statefun.sdk.shaded.com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(org.apache.flink.statefun.sdk.shaded.com.google.protobuf.Message other) {
      if (other instanceof SourceSnapshot) {
        return mergeFrom((SourceSnapshot)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(SourceSnapshot other) {
      if (other == SourceSnapshot.getDefaultInstance()) return this;
      if (other.getCommandsSentSoFarHandle() != 0) {
        setCommandsSentSoFarHandle(other.getCommandsSentSoFarHandle());
      }
      if (other.getFailuresGeneratedSoFar() != 0) {
        setFailuresGeneratedSoFar(other.getFailuresGeneratedSoFar());
      }
      if (other.hasTracker()) {
        mergeTracker(other.getTracker());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        org.apache.flink.statefun.sdk.shaded.com.google.protobuf.CodedInputStream input,
        org.apache.flink.statefun.sdk.shaded.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      SourceSnapshot parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.apache.flink.statefun.sdk.shaded.com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (SourceSnapshot) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int commandsSentSoFarHandle_ ;
    /**
     * <code>int32 commandsSentSoFarHandle = 1;</code>
     */
    public int getCommandsSentSoFarHandle() {
      return commandsSentSoFarHandle_;
    }
    /**
     * <code>int32 commandsSentSoFarHandle = 1;</code>
     */
    public Builder setCommandsSentSoFarHandle(int value) {
      
      commandsSentSoFarHandle_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 commandsSentSoFarHandle = 1;</code>
     */
    public Builder clearCommandsSentSoFarHandle() {
      
      commandsSentSoFarHandle_ = 0;
      onChanged();
      return this;
    }

    private int failuresGeneratedSoFar_ ;
    /**
     * <code>int32 failuresGeneratedSoFar = 2;</code>
     */
    public int getFailuresGeneratedSoFar() {
      return failuresGeneratedSoFar_;
    }
    /**
     * <code>int32 failuresGeneratedSoFar = 2;</code>
     */
    public Builder setFailuresGeneratedSoFar(int value) {
      
      failuresGeneratedSoFar_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 failuresGeneratedSoFar = 2;</code>
     */
    public Builder clearFailuresGeneratedSoFar() {
      
      failuresGeneratedSoFar_ = 0;
      onChanged();
      return this;
    }

    private FunctionTrackerSnapshot tracker_;
    private org.apache.flink.statefun.sdk.shaded.com.google.protobuf.SingleFieldBuilderV3<
        FunctionTrackerSnapshot, FunctionTrackerSnapshot.Builder, FunctionTrackerSnapshotOrBuilder> trackerBuilder_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.FunctionTrackerSnapshot tracker = 3;</code>
     */
    public boolean hasTracker() {
      return trackerBuilder_ != null || tracker_ != null;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.FunctionTrackerSnapshot tracker = 3;</code>
     */
    public FunctionTrackerSnapshot getTracker() {
      if (trackerBuilder_ == null) {
        return tracker_ == null ? FunctionTrackerSnapshot.getDefaultInstance() : tracker_;
      } else {
        return trackerBuilder_.getMessage();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.FunctionTrackerSnapshot tracker = 3;</code>
     */
    public Builder setTracker(FunctionTrackerSnapshot value) {
      if (trackerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        tracker_ = value;
        onChanged();
      } else {
        trackerBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.FunctionTrackerSnapshot tracker = 3;</code>
     */
    public Builder setTracker(
        FunctionTrackerSnapshot.Builder builderForValue) {
      if (trackerBuilder_ == null) {
        tracker_ = builderForValue.build();
        onChanged();
      } else {
        trackerBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.FunctionTrackerSnapshot tracker = 3;</code>
     */
    public Builder mergeTracker(FunctionTrackerSnapshot value) {
      if (trackerBuilder_ == null) {
        if (tracker_ != null) {
          tracker_ =
            FunctionTrackerSnapshot.newBuilder(tracker_).mergeFrom(value).buildPartial();
        } else {
          tracker_ = value;
        }
        onChanged();
      } else {
        trackerBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.FunctionTrackerSnapshot tracker = 3;</code>
     */
    public Builder clearTracker() {
      if (trackerBuilder_ == null) {
        tracker_ = null;
        onChanged();
      } else {
        tracker_ = null;
        trackerBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.FunctionTrackerSnapshot tracker = 3;</code>
     */
    public FunctionTrackerSnapshot.Builder getTrackerBuilder() {
      
      onChanged();
      return getTrackerFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.FunctionTrackerSnapshot tracker = 3;</code>
     */
    public FunctionTrackerSnapshotOrBuilder getTrackerOrBuilder() {
      if (trackerBuilder_ != null) {
        return trackerBuilder_.getMessageOrBuilder();
      } else {
        return tracker_ == null ?
            FunctionTrackerSnapshot.getDefaultInstance() : tracker_;
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.FunctionTrackerSnapshot tracker = 3;</code>
     */
    private org.apache.flink.statefun.sdk.shaded.com.google.protobuf.SingleFieldBuilderV3<
        FunctionTrackerSnapshot, FunctionTrackerSnapshot.Builder, FunctionTrackerSnapshotOrBuilder>
        getTrackerFieldBuilder() {
      if (trackerBuilder_ == null) {
        trackerBuilder_ = new org.apache.flink.statefun.sdk.shaded.com.google.protobuf.SingleFieldBuilderV3<
            FunctionTrackerSnapshot, FunctionTrackerSnapshot.Builder, FunctionTrackerSnapshotOrBuilder>(
                getTracker(),
                getParentForChildren(),
                isClean());
        tracker_ = null;
      }
      return trackerBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final org.apache.flink.statefun.sdk.shaded.com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final org.apache.flink.statefun.sdk.shaded.com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.e2e.smoke.SourceSnapshot)
  }

  // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.e2e.smoke.SourceSnapshot)
  private static final SourceSnapshot DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new SourceSnapshot();
  }

  public static SourceSnapshot getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final org.apache.flink.statefun.sdk.shaded.com.google.protobuf.Parser<SourceSnapshot>
      PARSER = new org.apache.flink.statefun.sdk.shaded.com.google.protobuf.AbstractParser<SourceSnapshot>() {
    @Override
    public SourceSnapshot parsePartialFrom(
        org.apache.flink.statefun.sdk.shaded.com.google.protobuf.CodedInputStream input,
        org.apache.flink.statefun.sdk.shaded.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.statefun.sdk.shaded.com.google.protobuf.InvalidProtocolBufferException {
      return new SourceSnapshot(input, extensionRegistry);
    }
  };

  public static org.apache.flink.statefun.sdk.shaded.com.google.protobuf.Parser<SourceSnapshot> parser() {
    return PARSER;
  }

  @Override
  public org.apache.flink.statefun.sdk.shaded.com.google.protobuf.Parser<SourceSnapshot> getParserForType() {
    return PARSER;
  }

  @Override
  public SourceSnapshot getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

